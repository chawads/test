<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
	    <!--<property name="securityManager" ref="securityManager"/>-->
	    <!---->
	    <!--&lt;!&ndash; override these for application-specific URLs if you like: &ndash;&gt;-->
	    <!--<property name="loginUrl" value="/"/>-->
	    <!--<property name="successUrl" value="/home"/>-->
	    <!--&lt;!&ndash; <property name="unauthorizedUrl" value="/unauthorized.jsp"/> &ndash;&gt;-->
	    <!--&lt;!&ndash; The 'filters' property is not necessary since any declared javax.servlet.Filter bean  &ndash;&gt;-->
	    <!--&lt;!&ndash; defined will be automatically acquired and available via its beanName in chain        &ndash;&gt;-->
	    <!--&lt;!&ndash; definitions, but you can perform instance overrides or name aliases h	ere if you like: &ndash;&gt;-->
	    <!--&lt;!&ndash; <property name="filters">-->
	        <!--<util:map>-->
	            <!--<entry key="anAlias" value-ref="someFilter"/>-->
	        <!--</util:map>-->
	    <!--</property> &ndash;&gt;-->
		<!--<property name="filterChainDefinitions">-->
            <!--<value>-->
            	<!--/resources/** = anon-->
            	<!--/resources/images/** = anon-->
            	<!--/resources/font/** = anon-->
            	<!--/resources/js/** = anon-->
            	<!--/resources/js/fusion/** = anon-->
                <!--/login = anon-->
                <!--/forgotPassword = anon-->
                <!--/emailPassword = anon-->
                <!--/home/** = authc-->
                <!--/logout = logout-->
                <!--/** = authc-->
            <!--</value>-->
        <!--</property>-->
	<!--</bean>	-->
	<!---->
	<!--&lt;!&ndash; Define any javax.servlet.Filter beans you want anywhere in this application context.   &ndash;&gt;-->
	<!--&lt;!&ndash; They will automatically be acquired by the 'shiroFilter' bean above and made available &ndash;&gt;-->
	<!--&lt;!&ndash; to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     &ndash;&gt;-->
	<!--&lt;!&ndash; to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       &ndash;&gt;-->
	<!--&lt;!&ndash; <bean id="someFilter" class=""/> &ndash;&gt;-->
	<!---->
	<!--&lt;!&ndash; <bean id="anotherFilter" class=""> -->
	<!---->
	 <!--</bean> &ndash;&gt;-->

	<!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
	    <!--&lt;!&ndash;<property name="realm" ref="customRealm"/>&ndash;&gt;-->
	<!--</bean>-->
	<!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->
	<!---->
	
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<!--<bean id="customRealm" class="com.gamma.vivo.console.auth.VivoRealm"></bean>		-->
</beans>
